// Table creation 

CREATE TABLE IF NOT EXISTS groups (
id                SERIAL PRIMARY KEY UNIQUE NOT NULL, 
parent_id        INTEGER         , 
Name                TEXT NOT NULL, 
DateAdded           DATE NOT NULL, 
NumDailyReports  INTEGER NOT NULL, 
GroupCode           TEXT UNIQUE NOT NULL, 
ObserverPassword    TEXT NOT NULL, 
MemberPassword      TEXT NOT NULL, 
AdminPassword       TEXT NOT NULL, 
FOREIGN KEY(parent_id) REFERENCES groups(id)
);

CREATE TABLE IF NOT EXISTS users (
id        SERIAL PRIMARY KEY UNIQUE NOT NULL, 
group_id INTEGER NOT NULL, 
Name        TEXT NOT NULL, 
DateAdded   DATE NOT NULL, 
rank     INTEGER NOT NULL, 
DateRemoved DATE, 
FOREIGN KEY(group_id) REFERENCES groups(id)
);

CREATE TABLE IF NOT EXISTS attendance (
id             SERIAL PRIMARY KEY UNIQUE NOT NULL, 
group_id      INTEGER NOT NULL, 
user_id       INTEGER NOT NULL, 
TimePeriod    INTEGER NOT NULL, 
Date             DATE NOT NULL, 
AttendanceStatus TEXT NOT NULL, 
FOREIGN KEY(group_id) REFERENCES groups(id), 
FOREIGN KEY(user_id) REFERENCES users(id), 
CONSTRAINT unq UNIQUE(group_id, user_id, TimePeriod, Date)
); 

CREATE TABLE IF NOT EXISTS admins (
id        SERIAL PRIMARY KEY UNIQUE NOT NULL, 
group_id INTEGER NOT NULL, 
DateAdded   DATE NOT NULL, 
chat_id     TEXT NOT NULL, 
role        TEXT NOT NULL,
username    TEXT, 
FOREIGN KEY(group_id) REFERENCES groups(id)
);

CREATE TABLE IF NOT EXISTS admin_movements (
id         SERIAL PRIMARY KEY UNIQUE NOT NULL, 
admin_id   INTEGER NOT NULL, 
group_id   INTEGER NOT NULL, 
DateTime   TIMESTAMPTZ NOT NULL, 
function   TEXT NOT NULL, 
admin_text TEXT NOT NULL, 
FOREIGN KEY(admin_id) REFERENCES admins(id), 
FOREIGN KEY(group_id) REFERENCES groups(id)
);

CREATE TABLE IF NOT EXISTS events (
id         SERIAL PRIMARY KEY UNIQUE NOT NULL, 
parent_id  INTEGER NOT NULL, 
event_name TEXT NOT NULL, 
DateStart  TIMESTAMPTZ NOT NULL, 
DateEnd    TIMESTAMPTZ NOT NULL, 
event_code TEXT NOT NULL, 
password   TEXT, 
group_id   INTEGER NOT NULL, 
FOREIGN KEY(parent_id) REFERENCES events(id), 
FOREIGN KEY(group_id) REFERENCES groups(id)
);

CREATE TABLE IF NOT EXISTS events_users (
id              SERIAL PRIMARY KEY UNIQUE NOT NULL, 
TimeJoined      TIMESTAMPTZ NOT NULL, 
user_id         INTEGER NOT NULL,
group_id        INTEGER NOT NULL, 
event_parent_id INTEGER NOT NULL, 
FOREIGN KEY(user_id) REFERENCES users(id)
);

SELECT DISTINCT parent_id FROM events WHERE group_id = %s;
SELECT parent_id FROM events WHERE event_code = %s AND parent_id = id;

# Have some logic to check that DateEnd is after DateStart 
INSERT INTO events (parent_id, event_name, DateStart, DateEnd, event_code, password, group_id) 
VALUES ((SELECT MAX(id) + 1 FROM events), %s, CURRENT_TIMESTAMP, %s, %s, %s, %s)

// Inserting new group 
INSERT INTO groups (
parent_id, Name, DateAdded, GroupCode, 
ObserverPassword, MemberPassword, AdminPassword
) 
VALUES (?, ?, datetime('now'), ?, ?, ?, ?, ?)

INSERT INTO groups (
Name, DateAdded, GroupCode, 
ObserverPassword, MemberPassword, AdminPassword
)
VALUES (?, datetime('now'), ?, ?, ?, ?, ?)


Name                TEXT NOT NULL, 
DateAdded           TEXT NOT NULL, 
GroupCode           TEXT NOT NULL, 
ObserverPassword    TEXT NOT NULL, 
MemberPassword      TEXT NOT NULL, 
AdminPassword       TEXT NOT NULL, 



// Getting count of number of users in group 
SELECT COUNT(*) 
  FROM users
 WHERE users.group_id = ?



// Trial of updating attendance multiday 
                IF EXISTS(
                    SELECT * FROM attendance WHERE group_id = ? AND user_id = ? 
                       AND TimePeriod = ? AND Date = date('now', ?)
                )
                    BEGIN
                        UPDATE attendance
                        SET AttendanceStatus = ? 
                        WHERE group_id = ? AND user_id = ? AND TimePeriod = ? AND Date = date('now', ?)
                    END
                ELSE
                    BEGIN
                        INSERT INTO attendance
                        (AttendanceStatus, group_id, user_id, TimePeriod, Date)
                        VALUES (?, ?, ?, ?, date('now', ?)
                    END


// How to get the RunGroup that you need 
"""
SELECT group_id, user_id, Date, AttendanceStatus, (
SELECT COUNT(*) FROM attendance A
WHERE A.AttendanceStatus <> AT.AttendanceStatus 
AND A.Date <= AT.Date
AND A.user_id = AT.user_id 
AND A.group_id = AT.group_id 
) AS RunGroup 
FROM attendance AT
WHERE user_id = 29 
AND group_id = 14
AND Date > date('now') 
AND RunGroup = 0
ORDER BY Date DESC 
LIMIT 1
"""
(user_id, group_id, date_message)
